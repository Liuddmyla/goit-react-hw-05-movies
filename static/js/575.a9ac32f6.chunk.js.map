{"version":3,"file":"static/js/575.a9ac32f6.chunk.js","mappings":"2NACA,EAAuB,mBAAvB,EAAiD,mBAAjD,EAA2E,mBAA3E,EAA0G,wB,SCIpGA,EACK,UADLA,EAEM,WAFNA,EAGM,WAsDZ,EAnDa,WACX,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QAGR,GAA4BE,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA4BF,EAAAA,EAAAA,UAAS,MAArC,eAAOG,EAAP,KAAeC,EAAf,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KA0BA,OAxBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAG,6CAAyCV,EAAzC,qDAETM,EAAUP,GAELC,GAELW,MAAMD,GAAKE,MAAK,SAAAC,GACd,OAAIA,EAASC,GACJD,EAASE,OAETC,QAAQC,OAAO,IAAIC,MAAM,UAClC,IACAN,MAAK,YAAa,IAAXO,EAAU,EAAVA,KACNf,EAAUe,GACVb,EAAUP,EACX,IACAqB,OAAM,SAAAb,GACLC,EAASD,GACTD,EAAUP,EACX,GACH,GAAE,CAACC,KAIF,2BACGK,IAAWN,IAAoB,yBAAMQ,EAAMc,UAC3ChB,IAAWN,IAAkB,SAACuB,EAAA,EAAD,IAC7BnB,EAAOoB,QAAU,eAAIC,UAAWC,EAAf,SACbtB,EAAOuB,KAAI,SAAAC,GACR,OAAO,gBAAmBH,UAAWC,EAA9B,UACFE,EAAK,cAAmB,gBAAKC,IAAG,yCAAoCD,EAAK,cAAoBE,IAAI,WAC9F,gBAAKD,IAAI,2GAA2GC,IAAI,QAASC,MAAM,MAAMC,OAAO,SACxJ,cAAGP,UAAWC,EAAd,SAAyBE,EAAMK,QAC/B,eAAGR,UAAWC,EAAd,wBAAyCE,EAAMM,eAJnCN,EAAMO,GAMzB,OAEH,8DAGP,C","sources":["webpack://react-homework-template/./src/css/Cast.module.css?af17","components/Cast.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"Cast_list__U5mAp\",\"item\":\"Cast_item__zi5JH\",\"name\":\"Cast_name__tCfx5\",\"character\":\"Cast_character__ZNcKw\"};","import { useParams } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { Loader } from \"components/Loader\";\nimport css from \"../css/Cast.module.css\";\n\nconst Status = {\n  PENDING: 'pending',\n  RESOLVED: 'resolved',\n  REJECTED: 'rejected'\n};\n\nconst Cast = () => {\n  const { movieId } = useParams();\n    \n  \n  const [actors, setActors] = useState([]); \n  const [status, setStatus] = useState(null);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const URL = `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=7e2a233d026ec02ed6e123027bfe9410`;       \n    \n    setStatus(Status.PENDING);\n\n    if (!movieId) return;\n\n    fetch(URL).then(response => {\n      if (response.ok) {         \n        return response.json();\n      }\n        return Promise.reject(new Error('Error!'))\n     })\n     .then(({cast}) => {         \n       setActors(cast);        \n       setStatus(Status.RESOLVED);    \n     })\n     .catch(error => {\n       setError(error);\n       setStatus(Status.REJECTED);\n     });   \n  }, [movieId]) \n  \n \n  return (\n    <div>      \n      {status === Status.REJECTED && (<div>{error.message}</div>)}\n      {status === Status.PENDING && <Loader />}\n      {actors.length ? (<ul className={css.list}>          \n          {actors.map(actor=>{\n              return <li key={actor.id} className={css.item}>\n                  {actor['profile_path'] ? <img src={`https://image.tmdb.org/t/p/w200${actor['profile_path']}`} alt='actor' /> :\n                      <img src=\"https://kartinkin.net/uploads/posts/2022-03/thumbs/1646873360_3-kartinkin-net-p-inkognito-kartinki-3.jpg\" alt=\"actor\"  width=\"200\" height=\"300\" />}                  \n                  <p className={css.name}>{actor.name}</p>\n                  <p className={css.character}>Character: {actor.character}</p>\n              </li>      \n          })}\n       </ul>  \n      ):<p>No information about the actors!</p>}   \n    </div>\n  );\n};\n\nexport default Cast;"],"names":["Status","movieId","useParams","useState","actors","setActors","status","setStatus","error","setError","useEffect","URL","fetch","then","response","ok","json","Promise","reject","Error","cast","catch","message","Loader","length","className","css","map","actor","src","alt","width","height","name","character","id"],"sourceRoot":""}